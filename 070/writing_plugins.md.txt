
[SciTE-with-Python](index.html) > Writing Plugins

# Writing Plugins

Plugins have access to a large API and can add quite a bit of customized behavior.

* Plugins can create an entry in the Tools menu, and have an associated keyboard binding

* Plugins can register for an event, such as OnOpen or OnKey, and run code when the event is fired

### Changing built-in plugins

* Let's say we want to modify the built-in plugin "Insert accented character"

* Look at files in the SciTE home directory (Windows, this is the directory containing SciTE.exe, Linux, this is generally /usr/share/scite-with-python or /usr/local/share/scite-with-python)

* From this directory open tools\_internal/tools\_insert\_accented\_character/register.properties

* To disable this plugin, comment-out every line in register.properties (Ctrl+A to select all, Ctrl+Q to comment-out the lines), save, and re-open SciTE

* To change the keyboard binding, type a new binding into the line that starts with customcommand.insert\_accented\_character.shortcut

* To change the plugin's code, edit tools\_internal/tools\_insert\_accented\_character/\_\_init\_\_.py

### Adding a new plugin

* Look at files in the SciTE home directory as described above

* Create a new directory within tools\_internal, such as tools\_internal/example

* Create a file register.properties within tools\_internal/example

* Let's say we are on Windows and we want the keyboard shortcut Ctrl+Shift+Q to open Notepad

* Add the following to tools\_internal/example/register.properties

        *customcommandsregister.example_opennotepad=example_opennotepad|
        customcommand.example_opennotepad.name=Open notepad
        customcommand.example_opennotepad.shortcut=Ctrl+Shift+Q
        customcommand.example_opennotepad.action.start=C:\Windows\System32\notepad.exe

* (Note that because this command doesn't need to interact with the code editor, we don't need to write any Python script)

* Open SciTEGlobal.properties and scroll to the end, noticing other import statements. Add the line

import tools\_internal/example/register

* Save changes, close SciTE, and re-open SciTE. Now the item "Open notepad" will appear in the Tools menu, bound to Ctrl+Shift+Q

* If we want the plugin to only be enabled if a .txt file is open, add this line to tools\_internal/example/register.properties

customcommand.example\_opennotepad.filetypes=*.txt

### Variables exposed to tools

* In the previous example, the tool simply opened Notepad

* Edit the last line of tools\_internal/example/register.properties so that it reads

customcommand.example\_opennotepad.action.start=C:\Windows\System32\notepad.exe "$(FilePath)"

* Now the path to the current file will be passed as a command-line argument, so that Ctrl+Shift+Q will open the currently opened file in Notepad.

* Other variables exposed to tools include $(CurrentWord) $(CurrentSelection) $(SciteDefaultHome) $(SciteUserHome) and $(FileDir) 

### Adding a Python plugin

* As an example, let's create a plugin that makes four copies of the current line when the user presses Ctrl+Shift+4

* Follow the steps from "adding a new plugin" above

* Open tools\_internal/example/register.properties and add the following registration

        *customcommandsregister.example_makefourcopies=example_makefourcopies|
        customcommand.example_makefourcopies.name=Make four copies
        customcommand.example_makefourcopies.shortcut=Ctrl+Shift+4
        customcommand.example_makefourcopies.action.py=ThisModule().MakeFourCopies()
        customcommand.example_makefourcopies.path=tools_internal/example

* Create a file tools\_internal/example/\_\_init\_\_.py.

* Add the following code to tools\_internal/example/\_\_init\_\_.py

        def MakeFourCopies():
            from scite_extend_ui import ScEditor
            for i in range(4):
                ScEditor.LineDuplicate()

* Save, close SciTE, and re-open SciTE. Type some text into a document. Pressing Ctrl+Shift+4 will run the plugin and make four copies of the current line.

### Registering for events

* As an example, let's create a plugin that inserts the text '456' whenever you type the text '123'

* Follow every step in "adding a Python plugin" above

* Add the following line to tools\_internal/example/register.properties, after the line that starts with customcommand.example\_makefourcopies.path,

customcommand.example\_makefourcopies.callbacks=OnChar

* Add the following code to tools\_internal/example/\_\_init\_\_.py

        def OnChar(c):
            print('OnChar seen, character = ' + chr(c))
            if chr(c) == '3':
                from scite_extend_ui import ScEditor
                current_pos = ScEditor.GetCurrentPos()
                if chr(ScEditor.GetCharAt(current_pos - 2)) == '2':
                    if chr(ScEditor.GetCharAt(current_pos - 3)) == '1':
                        ScEditor.ReplaceSel('456')

* Save, close SciTE, and re-open SciTE. After typing a character, click inside the output pane on the right and see the "OnChar seen" logging we added. Logging is recommended when developing a plugin.

* After typing '123' into a document, the text '456' should appear

* Events that can be registered: OnOpen, OnBeforeSave, OnSave, OnDoubleClick, OnMarginClick, OnClose, OnChar, OnUserListSelection, OnKey, OnFileChange

* OnChar is given the character typed as an argument, as seen in the example

* OnKey is given four arguments (key, shift, ctrl, alt), where shift, ctrl, and alt are booleans

* OnOpen, OnBeforeSave, OnSave, OnClose are given the current filename as an argument

* You can register for more than one event with syntax like customcommand.example\_makefourcopies.callbacks=OnChar|OnOpen

### Useful API calls

* ScApp.GetFilePath() returns path of current file

* ScEditor.GetSelectedText() returns the selected text

* ScEditor.ReplaceSel() to insert text at the current caret position as if the text were typed

* ScEditor.BeginUndoAction() and ScEditor.EndUndoAction(), so that Ctrl+Z will undo a set of changes

* ScEditor.SetSel(start, end) to set the selection

* Be sure to see the [API reference](./html/SciTEWithPythonAPIReference.html), and note that any method on ScEditor can also be called on ScOutput

### User-interfaces

* Multi-key (chained) shortcuts

* GUI interfaces

* Custom context menus

    * ScEditor.UserListShow and registering for the event OnUserListSelection can be used to show a custom context menu
    
* Sending data

    * In Windows, WM\_COPYDATA can be used to send data, and even call into the Python extension. See the code tools\_external/tools\_search/code\_search\_definition.py in def sendSciteCmdNavigateToFirstResult; this code is running in an external python.exe process, but it can use WM\_COPYDATA to tell the editor to open a file.

    * Note also that SciTE can be started with command-line arguments to run actions on startup, as described in [SciTE Documentation](./html/SciTEDoc.html) / search for the text "Command line arguments to SciTE"

### Types of action

* Use customcommand.example.action.waitforcomplete\_console and provide the path to a executable along with optional command-line arguments. The command will be run and standard output will appear in the output pane.

* Use customcommand.example.action.waitforcomplete and provide the path to a executable along with optional command-line arguments.

* Use customcommand.example.action.start and provide the path to a executable along with optional command-line arguments. The process will be run asynchronously in the background, and not waited for.

* Use customcommand.example.action.py and provide Python code to run. The Python code will usually take the form ThisModule().Method() which will call a method from \_\_init\_\_.py in the directory referred to by "customcommand.example.path"

* Use customcommand.example.action.py\_immediate and provide Python code to run. The code will run immediately, even if another command is already running (this isn't usually needed).

    * This isn't usually needed, but an interesting feature for py\_immediate is that code running in this mode can call ScApp.RequestThatEventContinuesToPropagate(), which raises a special exception to SciTE. When SciTE receives this exception, it lets the keyboard event continue. For example, if you write a plugin that registers for Ctrl+S and which calls ScApp.RequestThatEventContinuesToPropagate(), when you press Ctrl+S, both your plugin and SciTE's default action "save the current document" occur.

### Links

[plugin api](./html/SciTEWithPythonAPIReference.html)

[usage and features](./usage\_and\_features.html)


