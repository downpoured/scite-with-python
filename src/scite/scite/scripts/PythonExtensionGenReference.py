
from __future__ import with_statement
import IFaceTableGen
import sys
import os

srcRoot = "../.."
sys.path.append(srcRoot + "/scintilla/scripts")

import Face
from FileGenerator import Regenerate

def cell(s):
	return "<td>%s</td>" % s

def getConstantsFromIFaceTableSrc():
	# returns list of strings
	results = []
	with open(os.path.join("..", "src", "IFaceTable.cxx"), "rt") as f:
		readingState = 'before'
		for l in f:
			l = l.strip()
			if l.startswith('static IFaceConstant ifaceConstants[] = {'):
				readingState = 'inside'
			elif readingState == 'inside' and l.startswith('};'):
				readingState = 'after'
			elif readingState == 'inside':
				parts = l.split(',')
				constantname = parts[0]
				constantname = constantname.lstrip(' {"')
				constantname = constantname.rstrip(' "')
				if not (constantname.startswith('IDM_') or constantname.startswith('SCE_') or \
					constantname.startswith('SCI_') or constantname.startswith('SCK_') or \
					constantname.startswith('SCLEX')):
					results.append(constantname)
	return results

def getLinesFromPythonExtensionSrc():
	# returns list of tuples (idm_name, methodName)
	results = []
	with open(os.path.join("..", "src", "PythonExtension.cxx"), "rt") as f:
		readingState = 'before'
		for l in f:
			l = l.strip()
			if l.startswith('//++Autogenerated -- run'):
				readingState = 'inside'
			elif readingState == 'inside' and l.startswith('//--Autogenerated -- end'):
				readingState = 'after'
			elif readingState == 'inside':
				method, idm, _ = l.split(',')
				method = method.lstrip(' {"')
				method = method.rstrip(' "')
				method = 'Cmd' + method
				idm = idm.lstrip(' ')
				idm = idm.rstrip(' }')
				results.append((idm, method))
	return results

def getMapFromIdmToMenuText():
	map = dict()
	with open(os.path.join("..", "win32", "SciTERes.rc"), "rt") as f:
		for l in f:
			l = l.strip()
			if l.startswith("MENUITEM") and "SEPARATOR" not in l:
				l = l.replace("MENUITEM", "").strip()
				text, symbol = l.split('",', 1)
				symbol = symbol.strip()
				text = text[1:].replace("&", "").replace("...", "")
				if "\\t" in text:
					text = text.split("\\t",1)[0]
				map[symbol] = text
	return map

def addPythonDefinedAppMethods(mapIdmToText, methodsIdm):
	manuallyAddMethods = '''MsgBox(s)|Show message box with text s
GetProperty(propname)|Returns value of property
SetProperty(propname, val)|Set value of property
UnsetProperty(propname)|Unset property
OpenFile(filename)|Open File
LocationNext|Go to next location
LocationPrev|Go to previous location
GetFilePath|Returns full file path
GetFileName|Returns file name
GetFileDirectory|Returns directory of file
GetSciteDirectory|Returns SciTE location
GetSciteUserDirectory|Returns SciTE user dir location'''.replace('\r\n','\n').split('\n')
	manuallyAddMethods.reverse()
	for line in manuallyAddMethods:
		methodName, desc = line.split('|')
		fakeidm = 'fake_idm_' + methodName
		mapIdmToText[fakeidm] = desc
		methodsIdm.insert(0, (fakeidm, methodName))
		
def addPythonDefinedConstants(currentList):
	manuallyAddConstants = '''MakeKeymod(keycode, shift=False, ctrl=False, alt=False)
MakeColor(red, green, blue)
GetColor(val)
StopEventPropagation'''.replace('\r\n','\n').split('\n')
	manuallyAddConstants.reverse()
	for added in manuallyAddConstants:
		currentList.insert(0, added)

def addPythonDefinedPaneMethods():
	manuallyAdd = '''Utils.GetAllText()
Utils.GetCurLine()
Utils.GetEolCharacter()
Utils.ExpandSelectionToIncludeEntireLines()
PaneAppend(txt)
PaneInsertText(txt, pos)
PaneRemoveText(npos1, npos2)
PaneGetText(n1, n2)
PaneFindText(s, pos1=0, pos2=-1, wholeWord=False, matchCase=False, regExp=False, flags=0) 
PaneWrite(txt, pos=None)
GetLineText(line)
GetSelectedText()
GetCurrentLineText()'''.replace('\r\n','\n').split('\n')

def writeScAppMethodsToFile(out):
	mapIdmToText = getMapFromIdmToMenuText()
	methodsIdm = getLinesFromPythonExtensionSrc()
	addPythonDefinedAppMethods(mapIdmToText, methodsIdm)
	includeEvenWithNoText = dict(CmdFindNextBackSel=1, CmdFindNextSel=1, CmdMoveTabLeft=1,
		CmdMoveTabRight=1, CmdNextFileStack=1, CmdPrevFileStack=1, CmdPasteAndDown=1)
	for idm_name, methodName in methodsIdm:
		text = mapIdmToText.get(idm_name, None)
		if text is None:
			if methodName in includeEvenWithNoText:
				text = ''
			else:
				continue
				
		if '(' not in methodName:
			methodName = methodName + '()'
		methodName = 'ScApp.' + methodName
		out.write("<tr><td>%s</td><td>%s</td></tr>\n" % (methodName, text))

def writeScConstMethodsToFile(out):
	currentList = getConstantsFromIFaceTableSrc()
	addPythonDefinedConstants(currentList)
	for constant in currentList:
		# many are for SCN_ events which aren't useful to the python extension
		if not (constant.startswith('SC_FOLDFLAG_') or constant.startswith('SC_MARKNUM_') \
			or constant.startswith('SC_MOD_') or constant.startswith('SC_MARK_') or constant.startswith('SC_UPDATE_') \
			or constant.startswith('SC_MODEVENTMASKALL') or constant.startswith('SC_PERFORMED_') \
			or constant.startswith('SC_MULTISTEPUNDOREDO') or constant.startswith('SC_LASTSTEPINUNDOREDO') \
			or constant.startswith('SC_MULTILINEUNDOREDO') or constant.startswith('SC_STARTACTION') \
			or constant.startswith('SC_AC_')):
			constant = 'ScConst.' + constant
			out.write("<tr><td>%s</td></tr>\n" % (constant))

startFile = """
<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!--Generated by scite/scripts/PythonExtensionDocGen.py -->
<style type="text/css">
	body { font-family:verdana, Geneva, sans-serif; font-size: 80% }
	table { border: 1px solid #1F1F1F; border-collapse: collapse; }
	td { border: 1px solid; border-color: #E0E0E0 #000000; padding: 1px 5px 1px 5px; }
	th { border: 1px solid #1F1F1F; padding: 1px 5px 1px 5px; }
	thead { background-color: #000000; color: #FFFFFF; }
</style>
<body>
"""

def writeScAppMethods(out):
	out.write("<h2>ScApp methods</h2>\n")
	out.write("<table>\n")
	writeScAppMethodsToFile(out)
	out.write("</table>\n")

def writeScConstMethods(out):
	out.write("<h2>ScConst properties and methods</h2>\n")
	out.write("<table>\n")
	writeScConstMethodsToFile(out)
	out.write("</table>\n")

def RegenerateAll():
	with open(os.path.join("..", "SciTEWithPythonAPIReference.html"), "w") as out:
		out.write(startFile)
		writeScAppMethods(out)
		writeScConstMethods(out)
		out.write("</body>\n</html>\n")
	
if __name__=="__main__":
	RegenerateAll()
