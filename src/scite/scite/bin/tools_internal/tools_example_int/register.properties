

*customcommandsregister.example_inserttext=example_inserttext|
customcommand.example_inserttext.name=Insert text
customcommand.example_inserttext.filetypes=*
customcommand.example_inserttext.shortcut=Ctrl+Alt+Shift+7
customcommand.example_inserttext.action=py:import SciTEModule; SciTEModule.ScEditor.Write('inserted')
customcommand.example_inserttext.mode=subsystem:director,savebefore:no

*customcommandsregister.example_trackcurrentfilename=example_trackcurrentfilename|
customcommand.example_trackcurrentfilename.name=Print current filename
customcommand.example_trackcurrentfilename.filetypes=*
customcommand.example_trackcurrentfilename.shortcut=Ctrl+Alt+Shift+8
customcommand.example_trackcurrentfilename.action=py:import SciTEModule; SciTEModule.findCallbackModule('example_trackcurrentfilename', 'tools_internal/tools_example_int').PrintCurrent()
customcommand.example_trackcurrentfilename.mode=subsystem:director,savebefore:no
customcommand.example_trackcurrentfilename.callbacks=OnOpen|OnSwitchFile|OnClose|OnKey|OnUserStrip
customcommand.example_trackcurrentfilename.path=tools_internal/tools_example_int

# included here for reference:
# *customcommandsregister.cmdnamesortorder=cmdname|
# in this example, sort ordering will be based on cmdnamesortorder
# command.mode settings are:
#	filter (yes/no) (indicates current file will be modified)
#	quiet (yes/no) (suppresses stdout)
#	replaceselection (yes/no/auto)
#	savebefore (yes/no/prompt)
#	subsystem (console/windows/shellexec/director/immediate)
#	groupundo (yes/no) (director only)
# action start with * to prompt for params dialog
# if subsystem=console, use customcommand.example.stdin to send data to the process


