


# reference:
# set an action by setting one of the following:
# customcommand.cmdname.action.py=
# customcommand.cmdname.action.start=
# customcommand.cmdname.action.waitforcomplete=
# customcommand.cmdname.action.waitforcomplete_console=
# 
# 
# Can use an action starting with * to show a params dialog
#
#
# Additional options can be set with customcommand.cmdname.mode=
#	filter (yes/no) (indicates current file will be modified)
#	quiet (yes/no) (suppresses stdout)
#	replaceselection (yes/no/auto)
#	savebefore (yes/no/prompt)
# 
#
# If using waitforcomplete_console, can provide a string to stdin
# 	customcommand.cmdname.action.stdin=testing string

*customcommandsregister.example_openpaint=example_openpaint|
customcommand.example_openpaint.name=Open paint
customcommand.example_openpaint.filetypes=*.png
customcommand.example_openpaint.shortcut=Ctrl+Alt+Shift+5
customcommand.example_openpaint.action.start=c:\windows\System32\mspaint.exe "$(FilePath)"

*customcommandsregister.example_runpython=example_runpython|
customcommand.example_runpython.name=Run external python
customcommand.example_runpython.shortcut=Ctrl+Alt+Shift+6
customcommand.example_runpython.action.waitforcomplete_console=$(customcommand.externalpython) -c "print 'extpython'"

